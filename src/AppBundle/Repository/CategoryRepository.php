<?php

namespace AppBundle\Repository;
use AppBundle\Entity\Product;
use AppBundle\Entity\Category;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends \Doctrine\ORM\EntityRepository
{
    public function __construct(EntityManager $em)
    {
        parent::__construct($em, new Mapping\ClassMetadata(Category::class));
    }

    public function getMainCategoriesWithProducts(){
        $em = $this->getEntityManager();
        $query = $em->createQuery('SELECT a,c,p FROM AppBundle:Category a
                              LEFT JOIN a.products c
                              LEFT JOIN c.promotions p
                              WHERE a.parent IS NULL');
        return $query->getResult();
    }

    public function getAllCategoriesWithProducts(){
        $em = $this->getEntityManager();
        $query = $em->createQuery('SELECT a,c FROM AppBundle:Category a
                              LEFT JOIN a.products c
                              ORDER BY a.name ASC');
        return $query->getResult();
    }

    public function findAllProducts(int $categoryId){
        $em = $this->getEntityManager();
        $query = $em->createQuery(" SELECT p,c
                                        FROM AppBundle:Product p
                                        INNER JOIN p.category c
                                        WHERE (c.id = $categoryId
                                        OR c.parent = $categoryId)
                                        AND p.isActive = 1");
        return $query->getResult();
    }

    public function getProductsCountByCategory(int $categoryId){
        $em = $this->getEntityManager();
        $query = $em->createQuery(" SELECT COUNT(p)
                                        FROM AppBundle:Product p
                                        INNER JOIN p.category c
			                            WHERE c = $categoryId or c.parent = $categoryId");
        $query->setMaxResults(1);

        return $query->getOneOrNullResult()[1];
    }

    public function findProductsByCategoryPaginated(int $categoryId,int $limit = 0, int $offset = 0)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery(" SELECT p,c
                                        FROM AppBundle:Product p
                                        INNER JOIN p.category c
			                            WHERE (c = $categoryId or c.parent = $categoryId)
			                            AND p.isActive = 1");
        $query->setFirstResult($offset);
        $query->setMaxResults($limit);

        return $query->getResult();
    }


    public function getSubCategories(int $id){
        $em = $this->getEntityManager();
        $query = $em->createQuery("SELECT c FROM AppBundle:Category c
                                        WHERE c.parent = $id");
        return $query->getResult();
    }
}
